using System.Diagnostics.CodeAnalysis;
using Microsoft.Extensions.Logging;
using ProSoft.Library.Core.Contracts;
using ProSoft.Library.Core.Models;
using ProSoft.Library.Data.Contracts;

namespace ProSoft.Library.Core.Manager;

public sealed class TagManager : ITagManager
{
    private readonly ILogger<TagManager> _logger;
    private ITagEngine _tagEngine;

    public TagManager(ILogger<TagManager> logger, ITagEngine tagEngine)
    {
        _logger = logger;
        _tagEngine = tagEngine;
    }

    public Task<IQueryable<Tag>> GetTagListAsync(CancellationToken cancellationToken)
    {
        var result = _tagEngine.GetAll();
        
        return Task.FromResult(result);
    }

    public Task<Tag?> GetTagAsync(Guid systemId, CancellationToken cancellationToken)
    {
        return _tagEngine.GetAsync(systemId, cancellationToken);
    }

    #region IDisposable Interface Implementation

    private bool _disposed;

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
    /// </summary>
    /// <autogeneratedoc />
    [ExcludeFromCodeCoverage]
    public void Dispose()
    {
        this.Dispose(true);
        GC.SuppressFinalize(this);
    }

    /// <summary>
    /// Releases unmanaged and - optionally - managed resources.
    /// </summary>
    /// <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    /// <autogeneratedoc />
    [ExcludeFromCodeCoverage]
    private void Dispose(bool disposing)
    {
        if (!_disposed && disposing)
        {
            // Disposing Logic
            _tagEngine?.Dispose();
            _tagEngine = null!;
        }

        _disposed = true;
    }

    /// <summary>
    /// Finalizes an instance of the <see cref="TagManager"/> class.
    /// </summary>
    /// <autogeneratedoc />
    [ExcludeFromCodeCoverage]
    ~TagManager()
    {
        this.Dispose(false);
    }

    #endregion
}

using System.Diagnostics.CodeAnalysis;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using ProSoft.Library.Core.Models;
using ProSoft.Library.Data.Contracts;

namespace ProSoft.Library.Data.Postgres.Engines;

public sealed class TagEngine : ITagEngine
{
    private readonly ILogger<TagEngine> _logger;
    private readonly LibraryDbContext _dbContext;

    public TagEngine(ILogger<TagEngine> logger, LibraryDbContext dbContext)
    {
        _logger = logger;
        _dbContext = dbContext;
    }

    public IQueryable<Tag> GetAll()
    {
        var data = _dbContext.Set<Tag>();

        return data;
    }

    public Task<Tag?> GetAsync(Guid systemId, CancellationToken cancellationToken)
    {
        return _dbContext.Set<Tag>().FirstOrDefaultAsync
        (
            x => x.SystemId == systemId,
            cancellationToken
        );
    }

    #region IDisposable Interface Implementation

    private bool _disposed;

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
    /// </summary>
    /// <autogeneratedoc />
    [ExcludeFromCodeCoverage]
    public void Dispose()
    {
        this.Dispose(true);
        GC.SuppressFinalize(this);
    }

    /// <summary>
    /// Releases unmanaged and - optionally - managed resources.
    /// </summary>
    /// <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    /// <autogeneratedoc />
    [ExcludeFromCodeCoverage]
    private void Dispose(bool disposing)
    {
        if (!_disposed && disposing)
        {
            // Disposing Logic
        }

        _disposed = true;
    }

    /// <summary>
    /// Finalizes an instance of the <see cref="TagEngine"/> class.
    /// </summary>
    /// <autogeneratedoc />
    [ExcludeFromCodeCoverage]
    ~TagEngine()
    {
        this.Dispose(false);
    }

    #endregion
}
